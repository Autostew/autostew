from enum import Enum


class ListName(Enum):
    events = 'events'
    tracks = 'tracks'
    vehicles = 'liveries'  # this is intended, as the vehicles list contains only a subset of the liveries list
    game_modes = 'enums/game_mode'
    tire_wears = 'enums/tire_wear'
    penalties = 'enums/penalties'
    participant_attributes = 'attributes/participant'
    fuel_usages = 'enums/fuel_usage'
    vehicle_classes = 'vehicle_classes'
    session_attributes = 'attributes/session'
    allowed_views = 'enums/allowed_view'
    player_flags = 'flags/player'
    weathers = 'enums/weather'
    damage = 'enums/damage'
    member_attributes = 'attributes/member'
    session_flags = 'flags/session'


class ServerListItem:
    def __init__(self, raw):
        self.raw = raw


class Track(ServerListItem):
    def __init__(self, raw):
        ServerListItem.__init__(self, raw)
        self.gridsize = raw['gridsize']
        self.name = raw['name']
        self.id = raw['id']


class Event(ServerListItem):
    def __init__(self, raw):
        ServerListItem.__init__(self, raw)
        self.name = raw['name']
        self.type = raw['type']
        self.description = raw['description']
        self.attributes = raw['attributes']


class Vehicle(ServerListItem):
    def __init__(self, raw, vehicle_classes):
        ServerListItem.__init__(self, raw)
        self.name = raw['name']
        self.id = raw['id']
        self.vehicle_class = vehicle_classes.get_list_items('name', raw['class'])[0]
        self.liveries = ServerList(raw['liveries'], Livery, no_subitems=True, vehicle=self)


class Livery(ServerListItem):
    def __init__(self, raw, vehicle):
        ServerListItem.__init__(self, raw)
        self.name = raw['name']
        self.id = raw['id']
        self.vehicle = vehicle


class NameValueItem(ServerListItem):
    def __init__(self, raw):
        ServerListItem.__init__(self, raw)
        self.name = raw['name']
        self.value = raw['value']


class AttributeItem(ServerListItem):
    def __init__(self, raw):
        ServerListItem.__init__(self, raw)
        self.name = raw['name']
        self.type = raw['type']
        self.access = raw['access']
        self.description = raw['description']


# only lists that don't refer to values in others lists can be set here
# lists with references are parsed separately
auto_list_to_types = {
    ListName.events: Event,
    ListName.tracks: Track,
    # ListName.vehicles: Vehicle,  --> cannot be autogenerated, refers to vehicle_class
    ListName.game_modes: NameValueItem,
    ListName.tire_wears: NameValueItem,
    ListName.penalties: NameValueItem,
    ListName.participant_attributes: AttributeItem,
    ListName.member_attributes: AttributeItem,
    ListName.session_attributes: AttributeItem,
    ListName.fuel_usages: NameValueItem,
    ListName.vehicle_classes: NameValueItem,
    ListName.allowed_views: NameValueItem,
    ListName.player_flags: NameValueItem,
    ListName.weathers: NameValueItem,
    ListName.damage: NameValueItem,
    ListName.session_flags: NameValueItem,
}


class ServerList:
    def __init__(self, raw, elem_type, no_subitems=False, **kwargs):
        self.raw = raw
        if no_subitems:
            self.description = None
            self.list = [elem_type(elem, **kwargs) for elem in self.raw]
        else:
            self.description = raw.get('description', None)
            self.list = [elem_type(elem, **kwargs) for elem in self.raw['list']]

    def get_list_items(self, key_field, key_value):
        result = []
        for elem in self.list:
            if elem.raw[key_field] == key_value:
                result.append(elem)
        return result


class ListGenerator:
    def __init__(self, api):
        self._api = api

    def generate_all(self):
        list_raw = self._api.get_lists()
        lists = {}
        for k, v in auto_list_to_types.items():
            list_content = list_raw[k.value]
            lists[k] = ServerList(list_content, v)
        # Vehicles get treated manually to get a Vehicle-to-VehicleClass link
        lists[ListName.vehicles] = ServerList(
            list_raw[ListName.vehicles.value],
            Vehicle,
            vehicle_classes=lists[ListName.vehicle_classes]
        )
        return lists